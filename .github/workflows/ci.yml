name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint-and-build:
    name: Lint and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create dummy .env for verify step
        run: sed 's/=.*/=dummy/g' .env.example > .env

      - name: Verify environment configuration
        run: node ./tools/verify-env.mjs

      - name: Typecheck (best effort)
        run: npm run -s typecheck || true

      - name: Run ESLint
        run: npm run lint

      - name: Smoke test edge functions
        env:
          VITE_IMAGE_EDGE_URL: ${{ secrets.VITE_IMAGE_EDGE_URL }}
          VITE_CONTENT_EDGE_URL: ${{ secrets.VITE_CONTENT_EDGE_URL }}
        run: node ./tools/smoke.mjs

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 30

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            coverage/
            test-results/
          retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results/integration/
          retention-days: 30

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: lint-and-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright E2E tests
        run: npm run test:e2e
        env:
          STAGING_APP_URL: ${{ secrets.STAGING_APP_URL }}

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  report-results:
    name: Report Test Results
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4

      - name: Display test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Jobs Status:" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.unit-tests.result }}" == "failure" || "${{ needs.integration-tests.result }}" == "failure" || "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "❌ **Some tests failed!**" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **All tests passed!**" >> $GITHUB_STEP_SUMMARY
          fi